	// Arrays
- used to store multiple values in one variable of same data type 
- fixed length
String car = "BMW" // variable 

String[] cars = {"BWM","Tesla","TATA"} // Array

	// accessing element in array 
cars[index number]

	// change element 
cars[0] = "Mercedez"

	// create a array of fixed length and add elements later 
String[] cars = new String(3)  	  // can store 3 elements 

cars[0] = "BMW";
cars[0] = "Tesla";
cars[0] = "TATA";

	// looping though an array 
for(int i=0, i<cars.length,i++){
	sout(cars[i]);
}

----------------------

// 2D Array - array of arrays 
	
String[][] cars = new Strings[3][3] // 3x3 array

	// putting values in 2d array 
for(inti=0,i<cars.length, i++){
	for(j=0,j<cars[i].length, j++){
		sout("Enter Element: ");
		element = input.nextLine()
		cars[i][j] = element	
	}
}  

	// printing all elements of 2d array 
for (int i = 0; i < array.length; i++) {
    for (int j = 0; j < array[i].length; j++) {
         System.out.print(array[i][j] + " ");
         }
    System.out.println();
}

	// another way to make 2d Array 
String[][] cars = { {}. {}, {} };

-----------------------

// String - a reff data type that can store one or more char

String name = "";

	// Some useful method
boolean equal = names.equal("");
boolean result = names.equalsIgnoreCase("");
int size = names.length();
boolean isEmpty = names.isEmpty();
String trim = names.trim();
String lower = names.toLowerCase();
String upper = names.toUpperCase();
String newNames =names.replace("","");

-----------------------

// Wrapper Class

Java wrapper classes are used to convert primitive data types into objects. Each primitive data type (int, char, etc.) has a corresponding wrapper class (Integer, Character, etc.).

// Why use it? 
- The Java Collection Framework (e.g., ArrayList, HashMap) only works with objects, not primitives. Wrapper classes allow you to store primitive values in collections.

- Wrapper classes provide useful methods for converting between types, parsing strings, and other operations (e.g., Integer.parseInt(), Double.toString()).

- Wrapper classes can be null, allowing you to represent the absence of a value. Primitives cannot be null.

-  Wrapper classes facilitate conversions between different types (e.g., converting a double to a String using Double.toString()). 

// Some Points 
- slower than primitive types
- starts with capital letter 

Boolean b = true;
Int i = 10; 


---------------------
// Arraylist 
- it is a resize able array
- elements can be added/removed after compilation phase
- stores reference data types
- import java.util.Arraylist;

Arraylist<WrapperClass> name = new Arraylist<WrapperClass>();

Arraylist<String> food = new Arraylist<String>();

food.add("pizaa");
food.add("burger");
food.add("cake");

for(int i=0,i<food.length,i++){
	sout(food.get(i));
}

	// some useful methods
food.get(index)
food.set(index,ValueToBePlaced)
food.remove(index)
food.clear() //empty Arraylist